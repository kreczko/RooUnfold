//=====================================================================-*-C++-*-
// File and Version Information:
//      $Id$
//
// Description:
//      Test Harness class for the RooUnfold package using toy MC generated
//      according to PDFs defined in RooUnfoldTestPdf.icc or RooUnfoldTestPdfRooFit.icc.
//
// Authors: Tim Adye <T.J.Adye@rl.ac.uk> and Fergus Wilson <fwilson@slac.stanford.edu>
//
//==============================================================================

#ifndef ROOUNFOLDTESTHARNESS_ICC
#define ROOUNFOLDTESTHARNESS_ICC

#include "RooUnfoldTestHarness.h"

#ifndef NOROOFIT
#define USE_ROOFIT
#endif

#include <cfloat>
#if !defined(__CINT__) || defined(__MAKECINT__)
#include <iostream>

#include "TROOT.h"
#include "TString.h"
#include "TStyle.h"
#include "TCanvas.h"
#include "TLegend.h"
#include "TRandom.h"
#include "TPostScript.h"
#include "TH1D.h"
#include "TH2D.h"
#include "TFile.h"
#include "TVectorD.h"
#include "TLine.h"
#include "TNtuple.h"
#include "TProfile.h"
#include "../include/RooUnfoldErrors.h"
#include "../include/RooUnfoldParms.h"
#include "../include/RooUnfoldResponse.h"
#include "../include/RooUnfold.h"
#include "../include/RooUnfoldSvd.h"
#ifdef USE_TUNFOLD_H
#include "RooUnfoldTUnfold.h"
#endif
#include "TPaveText.h"
#include "TLatex.h"
#endif
#include "ArgVars.h"

//==============================================================================
// MC generation routine: RooUnfoldTestPdf()
//==============================================================================

#ifdef USE_ROOFIT
#include "RooUnfoldTestPdfRooFit.icc"
#else
#include "RooUnfoldTestPdf.icc"
#endif

#if !defined(__CINT__) || defined(__MAKECINT__)
using std::cout;
using std::cerr;
using std::endl;
#endif

//==============================================================================
// Test parameters
//==============================================================================

void RooUnfoldTestHarness::Parms (ArgVars& args)
{
  TString methodHelp, methodHelp2;  // TString::Form seems to be limited to 4 parameters in CINT.
  methodHelp.Form ("unfolding method: %d=none, %d=Bayes, %d=SVD, ",
                   RooUnfold::kNone,     RooUnfold::kBayes,   RooUnfold::kSVD);
  methodHelp2.Form("%d=bin-by-bin, %d=TUnfold, %d=invert",
                   RooUnfold::kBinByBin, RooUnfold::kTUnfold, RooUnfold::kInvert);
  methodHelp += methodHelp2;
  args.Add ("method",  &method,       RooUnfold::kBayes, methodHelp.Data());
  args.Add ("stage",   &stage,        0, "1=train (writes RooUnfoldTest.root), 2=test (reads), 0=both (default)");
  args.Add ("ftrainx", &ftrainx,      0, "training X PDF: 0=flat, 1=top-hat, 2=Gaussian, 3=double exp, 4=B-W, 5=double B-W, 6=exp, 7=Gaussian+exp");
  args.Add ("ftestx",  &ftestx,       5, "test X PDF");
  args.Add ("ntx",     &ntx,         40, "#truth X bins");
  args.Add ("ntest",   &ntest,    10000, "#events to use for testing");
  args.Add ("ntrain",  &ntrain,  100000, "#events to use for training");
  args.Add ("xlo",     &xlo,        0.0, "X range minimum");
  args.Add ("xhi",     &xhi,       10.0, "X range maximum");
  args.Add ("regparm", &regparm,  -1e30, "regularisation parameter (default: Bayes niter=3, SVD kterm=ntx/2)", "");
  args.Add ("ntoyssvd",&ntoyssvd,  1000, "number of toys used to obtain SVD covariances");
#ifdef USE_TUNFOLD_H
  args.Add ("regmethod",&regmethod,   2, "TUnfold regularisation method (0=none, 1=size, 2=derivative, 3=curvature)");
#endif
  args.Add ("onepage", &onepage,      4, "number of plots to include on the page, or 0 for all plots on separate pages");
  args.Add ("doerror", &doerror,      RooUnfold::kCovariance,
                                         "error treatment (0=none, 1=error propagation, 2=covariance propagation, 3=toy MC)");
  args.Add ("nmx",     &nmx,         -1, "#measured X bins", "ntx");
  args.Add ("mtrainx", &mtrainx,    5.0, "training signal PDF X mean");
  args.Add ("wtrainx", &wtrainx,    1.2, "training signal PDF X width");
  args.Add ("btrainx", &btrainx,    0.2, "training X PDF background fraction");
  args.Add ("mtestx",  &mtestx,     5.5, "test signal PDF X mean");
  args.Add ("wtestx",  &wtestx,     1.0, "test signal PDF X width");
  args.Add ("btestx",  &btestx,     0.3, "test X PDF background fraction");
  args.Add ("effxlo",  &effxlo,     0.5, "efficiency at xlo");
  args.Add ("effxhi",  &effxhi,     0.9, "efficiency at xhi");
  args.Add ("xbias",   &xbias,     -1.0, "shift in X");
  args.Add ("xsmear",  &xsmear,     0.5, "X smearing width in bins");
  args.Add ("fakexlo", &fakexlo,    0.0, "fraction of fakes at xlo");
  args.Add ("fakexhi", &fakexhi,    0.0, "fraction of fakes at xhi");
  args.Add ("bincorr", &bincorr,    0.0, "correlation between neighbouring measured bins");
  args.Add ("overflow",&overflow,     0, "0=unfolding ignores under/overflow bins, 1=unfolding uses under/overflow bins, 2=fill under/overflows into first/last bins");
  args.Add ("addbias", &addbias,     -1, "apply systematic shift/rotation (disabled by default for bin-by-bin/invert methods)", "1");
  args.Add ("wpaper",  &wpaper,       0, "paper width", "");
  args.Add ("hpaper",  &hpaper,       0, "paper height", "");
  args.Add ("verbose", &verbose,      1, "debug level: 0=warnings, 1=verbose, 2=debug, 3=detailed");
  args.Add ("draw",    &dodraw,       1, "draw results");
  args.Add ("ntoys",   &ntoys,       -1, "number of toys for error calculation (doerror=3) or plots (ploterrors=1, default ntoys=500)", "50");
  args.Add ("ploterrors",&ploterrors, 0, "plot error comparison and chi2?");
  args.Add ("plotparms",&plotparms,   0, "plot errors for different regularisation parameters?");
  args.Add ("minparm", &minparm,  -1e30, "minimum value in regparm scan (with plotparms=1)", "");
  args.Add ("maxparm", &maxparm,  -1e30, "maximum value in regparm scan (with plotparms=1)", "");
  args.Add ("stepsize",&stepsize,     0, "step size in regparm scan (with plotparms=1)", "");
}

//==============================================================================
// Run tests
//==============================================================================

Int_t RooUnfoldTestHarness::Run()
{
  Init();
  if (error) return error;
  CheckParms();
  if (error) return error;
  if (dodraw) SetupCanvas();
  error= RunTests();
  if (dodraw) {
    ps->Close();
    delete ps; ps= 0;
  }
  TFile f (rootfile, "update");
  const TNamed* objs[] = { unfold, hTrain, hTrainTrue, hTrainFake, hTrue, hMeas, hFake,
                           hReco, hRes, hPulls, hPDFx, hTestPDFx,
                           hResmat, hCorr, hMeasCorr, hUnfErr, hToyErr, ntChi2,
                           hParmChi2, hParmErr, hParmRes, hParmRms };
  for (size_t i= 0; i<sizeof(objs)/sizeof(objs[0]); i++) {
    if (objs[i]) f.WriteTObject (objs[i], objs[i]->GetName());
  }
  f.Close();
  return error;
}


void RooUnfoldTestHarness::SetupCanvas()
{
  gROOT->SetStyle("Plain");
  gStyle->SetOptStat(0);
  gStyle->SetPalette(1,0);
  if (!onepage)    gStyle->SetOptTitle(0);
  if (onepage < 3) gStyle->SetHistLineWidth(2);
  if (onepage) {
    if (wpaper>0)  gStyle->SetCanvasDefW (wpaper);
    if (hpaper>0)  gStyle->SetCanvasDefH (hpaper);
    canvas= new TCanvas (GetName(), GetName(), 1);
  } else
    canvas= new TCanvas (GetName(), GetName(), wpaper, hpaper);
  TString psfile(GetName());
  psfile += ".ps";
  ps= new TPostScript (psfile, 112);
  bool grid= false;
  if (onepage==2) {
    gStyle->SetPadTopMargin(0.05);
    gStyle->SetPadRightMargin(0.02);
    gStyle->SetPadBottomMargin(0.08);
    gStyle->SetPadLeftMargin(0.06);
    canvas->Divide(1,2);
    TPad* pad1= (TPad*) canvas->GetPad(1);
    TPad* pad2= (TPad*) canvas->GetPad(2);
    pad1->SetPad (pad1->GetXlowNDC(), .3, pad1->GetXlowNDC()+pad1->GetWNDC(), pad1->GetYlowNDC()+pad1->GetHNDC());
    pad2->SetPad (pad2->GetXlowNDC(), pad2->GetYlowNDC(), pad2->GetXlowNDC()+pad2->GetWNDC(), .3);
    if (grid) {
      pad1->SetGrid(1);
      pad2->SetGrid(1);
    }
  } else if (onepage>=6) {
    if (grid) canvas->SetGrid();
    canvas->Divide(2,(onepage+1)/2);
  } else if (onepage>=3) {
    canvas->Divide(1,onepage);
  } else if (grid)
    canvas->SetGrid(1);
  ipad= 0;
}


Int_t RooUnfoldTestHarness::RunTests()
{
  if (stage != 2) {
    TString name("response"), title;
    title.Form ("Test %dD", dim);
    response= new RooUnfoldResponse (name, title);
    if (!response) return 3;
    if (overflow==1) response->UseOverflow();
    if (verbose>=0) cout << "==================================== TRAIN ====================================" << endl;
    if (!Train()) return 4;
    TFile f (rootfile, "recreate");
    f.WriteTObject (response, "response");
    f.Close();
  }

  if (stage != 1) {
    if (!response) {
      cout << "Read 'response' object from " << rootfile << endl;
      TFile f (rootfile);
      f.GetObject ("response", response);
      f.Close();
      if (!response) {
        cerr << "could not read 'response' object from " << rootfile << endl;
        return 5;
      }
    }
    if (verbose>=0) cout << "==================================== TEST =====================================" << endl;
    if (!Test())   return 6;
    if (verbose>=0) cout << "==================================== UNFOLD ===================================" << endl;
    if (!Unfold()) {
      if (dodraw) Results();
      return 7;
    }
    if (dodraw) {
      if (!plotparms){
        if (stage == 0) TrainResults();
        Results();
      }
      if (ploterrors) PlotErrors();
      if (plotparms)  PlotParms();
    }
  }
  return 0;
}

//==============================================================================
// Train: create response matrix
//==============================================================================

Int_t RooUnfoldTestHarness::Train()
{
  TVectorD xtrue(ntrain);
  hPDFx= Generate (xtrue, "trainpdfx", "Training PDF X", ntx, ftrainx, ntrain, xlo, xhi, mtrainx, wtrainx, btrainx, xbias, xsmear);
  if (!hPDFx) return 0;

  hTrainTrue= new TH1D ("traintrue", "Training", ntx, xlo, xhi);
  hTrainTrue->SetLineColor(kBlue);
  hTrain= new TH1D ("train", "Training Measured", nmx, xlo, xhi);
  hTrain->SetLineColor(kRed);
  hResmat= new TH2D ("resmat", "Response Matrix", nmx, xlo, xhi, ntx, xlo, xhi);
  response->Setup (nmx, xlo, xhi, ntx, xlo, xhi);
  // or:  response->Setup (hTrain, hTrainTrue);
  for (Int_t i= 0; i<ntrain; i++) {

    Double_t xt= (*&xtrue)[i];    // work round CINT crash on xtrue[i] (MacOSX x86_64 ROOT bug #75874)
    Double_t xto= Overflow (xt, ntx, xlo, xhi);
    hTrainTrue->Fill (xto);
    if (Eff (xt, xlo, xhi, effxlo, effxhi)) {    
      Double_t x=  Smear   (xt, ntx, xlo, xhi, xbias, xsmear);
      Double_t xo= Overflow (x, ntx, xlo, xhi);
      hTrain  ->Fill (xo);
      hResmat ->Fill (xo, xto);
      response->Fill (xo, xto);
    } else {
      response->Miss (xto);
    }
  }

  TVectorD xfake;
  Int_t nfake= Fakes (xfake, nmx, ntrain, xlo, xhi, fakexlo, fakexhi);
  if (nfake>0) {
    hTrainFake= new TH1D ("trainfake", "Training Fakes", nmx, xlo, xhi);
    hTrainFake->SetLineColor(93);
    for (Int_t i= 0; i<nfake; i++) {
      Double_t xf= (*&xfake)[i];
      hTrain    ->Fill (xf);
      hTrainFake->Fill (xf);
      response  ->Fake (xf);
    }
  }
  // or:  response->Setup (hTrain, hTrainTrue, hResmat);
  // or:  response->Setup (0, 0, hResmat);     // if no inefficiency or fakes

  if (verbose>=2) PrintMatrix(response->Mresponse(),"","response matrix",10);
  return 1;
}

void RooUnfoldTestHarness::TrainResults()
{
  if (mscalex!=1.0) {
    hTrain->Scale(mscalex);
    if (hTrainFake) hTrainFake->Scale(mscalex);
  }
  setmax (hTrainTrue, hPDFx, hTrain, hTrainFake);

  if (onepage && (onepage<4 || ipad>=onepage)) return;
  if (onepage) canvas->cd(++ipad);
  hTrainTrue->Draw();
  hPDFx ->Draw("LSAME");
  hTrain->Draw("SAME");
  if (hTrainFake) hTrainFake->Draw("SAME");
  if (!onepage) Legend (lTrain, hPDFx, hTrainTrue, hTrainFake, hTrain);
  canvas->Update();
}

//==============================================================================
// Test distribution
//==============================================================================

Int_t RooUnfoldTestHarness::Test()
{
  TVectorD xtest(ntest);
  hTestPDFx= Generate (xtest, "pdfx", "PDF X", ntx, ftestx, ntest, xlo, xhi, mtestx, wtestx, btestx, xbias, xsmear);
  if (!hTestPDFx) return 0;

  hTrue= new TH1D ("truth", "Test", ntx, xlo, xhi);
  hTrue->SetLineColor(kBlue);
  hMeas= new TH1D ("meas", "Test Measured", nmx, xlo, xhi);
  hMeas->SetLineColor(kRed);
  for (Int_t i=0; i<ntest ; i++) {
    Double_t xt= (*&xtest)[i];
    Double_t xto= Overflow (xt, ntx, xlo, xhi);
    hTrue->Fill(xto);
    if (Eff (xt, xlo, xhi, effxlo, effxhi)) {
      Double_t x = Smear   (xt, ntx, xlo, xhi, xbias, xsmear);
      Double_t xo= Overflow (x, ntx, xlo, xhi);
      hMeas->Fill(xo);
    }
  }

  TVectorD xfake;
  Int_t nfake= Fakes (xfake, nmx, ntest, xlo, xhi, fakexlo, fakexhi);
  if (nfake>0) {
    hFake= new TH1D ("fake", "Test Fakes", nmx, xlo, xhi);
    hFake->SetLineColor(93);
    for (Int_t i= 0; i<nfake; i++) {
      Double_t xf= (*&xfake)[i];
      hMeas->Fill (xf);
      hFake->Fill (xf);
    }
  }
  return 1;
}

//==============================================================================
// Add bin correlations to measured errors
//==============================================================================

void RooUnfoldTestHarness::SetMeasuredCov ()
{
  if (bincorr==0.0) return;
  TMatrixD cov= unfold->GetMeasuredCov();  // initially diagonal
  Double_t corr= bincorr;
  for (Int_t k=1; k<nmbins; k++) {
    for (Int_t i=k; i<nmbins; i++)
      cov(i,i-k)= cov(i-k,i)= corr*cov(i,i);
    corr *= bincorr;
    if (corr==0.0) break;
  }
  unfold->SetMeasuredCov (cov);
  hMeasCorr= CorrelationHist (cov, "measCor", "Measured correlation matrix",
                              response->Hresponse()->GetXaxis()->GetXmin(),
                              response->Hresponse()->GetXaxis()->GetXmax());
}

//==============================================================================
// Unfold
//==============================================================================

Int_t RooUnfoldTestHarness::Unfold ()
{
  if (verbose>=0) cout << "Create RooUnfold object for method " << method << endl;
  unfold= RooUnfold::New ((RooUnfold::Algorithm)method, response, hMeas, regparm, "unfold");
  if (!unfold) return 0;
  unfold->SetVerbose (verbose);
  if (ntoys<0) ntoys= (ploterrors) ? 500 : 50;
  unfold->SetNToys(ntoys);
  SetMeasuredCov();
  
  if (method == RooUnfold::kSVD)     (dynamic_cast<RooUnfoldSvd*    >(unfold))->SetNtoysSVD(ntoyssvd);
#ifdef USE_TUNFOLD_H
  if (method == RooUnfold::kTUnfold) (dynamic_cast<RooUnfoldTUnfold*>(unfold))->SetRegMethod((TUnfold::ERegMode)regmethod);
#endif
  if (verbose>=0) {cout << "Created "; unfold->Print();}
  hReco= unfold->Hreco((RooUnfold::ErrorTreatment)doerror);
  if (!hReco) return 0;
  hReco->SetName("reco");
  hReco->SetLineColor(kBlack);  // otherwise inherits style from hTrainTrue
  if (verbose>=0) unfold->PrintTable (cout, hTrue, (RooUnfold::ErrorTreatment)doerror);
  if (verbose>=2 && doerror>=RooUnfold::kCovariance) {
    TMatrixD covmat= unfold->Ereco((RooUnfold::ErrorTreatment)doerror);
    TMatrixD errmat(ntbins,ntbins);
    for (Int_t i=0; i<ntbins; i++)
      for (Int_t j=0; j<ntbins; j++)
        errmat(i,j)= covmat(i,j)>=0 ? sqrt(covmat(i,j)) : -sqrt(-covmat(i,j));
    PrintMatrix(errmat,"","covariance matrix",10);
  }

  // Calculate pulls and residuals
  hRes=   dynamic_cast<TH1*>(hReco->Clone ("res"));   
  hRes  ->Reset();
  hRes  ->SetTitle ("Residuals");
  hPulls= dynamic_cast<TH1*>(hReco->Clone ("pulls"));
  hPulls->Reset();
  hPulls->SetTitle ("Pulls");

  for (Int_t i= 1; i<=ntbins; i++) {
    if ((hReco->GetBinContent(i)!=0.0 || (doerror && hReco->GetBinError(i)>0.0)) &&
        (hTrue->GetBinContent(i)!=0.0 || (doerror && hTrue->GetBinError(i)>0.0))) {
      Double_t res= hReco->GetBinContent(i) - hTrue->GetBinContent(i);
      Double_t err= hReco->GetBinError  (i);
      hRes->SetBinContent (i, res);
      hRes->SetBinError   (i, err);
      if (err>0.0) {
        hPulls->SetBinContent (i, res/err);
        hPulls->SetBinError   (i, 1.0);
      }
    }
  }

  hCorr= CorrelationHist (unfold->Ereco((RooUnfold::ErrorTreatment)doerror),
                          "corr", "Unfolded correlation matrix",
                          response->Hresponse()->GetYaxis()->GetXmin(),
                          response->Hresponse()->GetYaxis()->GetXmax());
  return 1;
}

//==============================================================================
// Show results
//==============================================================================

void RooUnfoldTestHarness::Results()
{
  if (mscalex!=1.0) {
    hMeas->Scale(mscalex);
    if (hFake) hFake->Scale(mscalex);
  }
  setmax (hTrue, hTestPDFx, hMeas, hFake);
  if (hReco) {
    hReco->SetMarkerStyle(kFullDotLarge);
    setmax (hTrue, hReco);
  }

  if (onepage && ipad>=onepage) return;
  if (onepage) canvas->cd(++ipad);
  hTrue    ->Draw();
  hTestPDFx->Draw("LSAME");
  hMeas    ->Draw("SAME");
  if (hFake) hFake->Draw("SAME");
  if (hReco) hReco->Draw("SAME P");
  Legend (lTest, hTestPDFx, hTrue, hFake, hMeas, hReco);
  canvas->Update();

  if (!hReco)        return;
  if (ploterrors>=2) return;

  if (onepage && ipad>=onepage) return;
  if (onepage) canvas->cd(++ipad);
  hRes->SetMarkerStyle(kFullDotLarge);
  hRes->Draw();
  TLine().DrawLine(hRes->GetBinLowEdge(1), 0.0, hRes->GetBinLowEdge(ntx+1), 0.0);  // draw a line at y=0;
  canvas->Update();

  if (ploterrors)    return;

  if (onepage && ipad>=onepage) return;
  if (onepage) canvas->cd(++ipad);
  gPad->Divide(2,1);
  gPad->cd(1);
  if (hMeasCorr) {
    hMeasCorr->Draw("COLZ");
    canvas->cd(ipad);
    gPad->cd(2);
  }
  hCorr->Draw("COLZ");
  canvas->Update();

  if (onepage && ipad>=onepage) return;
  if (onepage) canvas->cd(++ipad);
  hPulls->SetMarkerStyle(kFullDotLarge);
  hPulls->Draw("P");
  TLine().DrawLine(hPulls->GetBinLowEdge(1), 0.0, hPulls->GetBinLowEdge(ntx+1), 0.0);  // draw a line at pull=0;
  canvas->Update();
}

void RooUnfoldTestHarness::PlotErrors()
{
  if (onepage && ipad>=onepage) return;
  if (onepage) canvas->cd(++ipad);
  TH1* t= 0;
  if (ploterrors>=2) t=hTrue;
  errors= new RooUnfoldErrors(ntoys,unfold,t);
  hToyErr=errors->RMSResiduals();
  hUnfErr=errors->UnfoldingError();
  setmax(hUnfErr,hToyErr);
  hUnfErr->Draw("HIST");
  hToyErr->Draw("P SAME");

  lErrors= new TLegend (0.75, 0.75, 0.894, 0.89);
  lErrors->SetTextSize(0.05);
  lErrors->SetTextFont(42);
  lErrors->AddEntry (hUnfErr, "Unfolding errors", "L");
  lErrors->AddEntry (hToyErr, "Toy MC RMS",       "P");
  lErrors->Draw();
  canvas->Update();

  if (ploterrors<2) return;
  if (onepage && ipad>=onepage) return;
  if (onepage) canvas->cd(++ipad);
  ntChi2= errors->Chi2();
  Double_t good_chi= ntChi2->Draw("chi2","abs(chi2)<1e10");
  if (ntoys>good_chi){
    TString chi;
    chi+=(ntoys-good_chi);
    chi += (" bad #chi^{2}s");
    TPaveText* pave=new TPaveText;
    pave->SetFillColor(0);
    pave->SetX1NDC(0.7);
    pave->SetX2NDC(0.9);
    pave->SetY1NDC(0.7);
    pave->SetY2NDC(0.9);
    TText *t1=pave->AddText(chi);
    t1->SetTextSize(0.07);
    pave->Draw();
  }
  canvas->Update();
}

void RooUnfoldTestHarness::PlotParms()
{
  if (onepage && ipad>=onepage) return;
  if (onepage) canvas->cd(++ipad);
  parms= new RooUnfoldParms(unfold,(RooUnfold::ErrorTreatment)doerror,hTrue);
  if (maxparm>minparm) parms->SetMaxParm(maxparm);
  if (minparm!=-1e30)  parms->SetMinParm(minparm);
  if (stepsize>0)      parms->SetStepSizeParm(stepsize);
  hParmChi2= parms->GetChi2();
  hParmChi2->Draw("P");    
  canvas->Update();

  if (onepage && ipad>=onepage) return;
  if (onepage) canvas->cd(++ipad);
  hParmErr= parms->GetRMSError();
  hParmErr->Draw("P");    
  canvas->Update();

  if (onepage && ipad>=onepage) return;
  if (onepage) canvas->cd(++ipad);
  hParmRes= parms->GetMeanResiduals();
  hParmRes->Draw("P"); 
  canvas->Update();

  if (onepage && ipad>=onepage) return;
  if (onepage) canvas->cd(++ipad);
  hParmRms= parms->GetRMSResiduals();
  hParmRms->Draw("P"); 
  canvas->Update();
}


//==============================================================================
// Generate PDF using RooUnfoldTestPdf
//==============================================================================

TH1D* RooUnfoldTestHarness::Generate (TVectorD& x, const char* name, const char* title,
                                      Int_t nt, Int_t fpdf, Int_t nx, Double_t lo, Double_t hi,
                                      Double_t mean, Double_t width, Double_t bkg,
                                      Double_t /* bias */, Double_t /* smear */)
{
  TH1D* hPDF= new TH1D (name, title, nbPDF, lo, hi);
  hPDF->SetLineColor(kGreen);
  hPDF->SetLineWidth(2);
  if (overflow == 1) {
    // Fill under/overflow bins too
    Double_t xbin= (hi-lo) / Double_t(nt);
    lo -= xbin;
    hi += xbin;
  }
  if (verbose >= 1) cout << "Generate values in range " << lo << " to " << hi << endl;
  if (!RooUnfoldTestPdf (fpdf, nx, lo, hi, x, hPDF, mean, width, bkg, verbose)) return 0;
  hPDF->Scale (nbPDF/Double_t(nt));
  return hPDF;
}

//==============================================================================
// Generate fakes using a linear PDF from (x0,y0) to (x1,y1)
//==============================================================================

Int_t RooUnfoldTestHarness::Fakes (TVectorD& x, Int_t nm, Int_t nx, Double_t x0, Double_t x1, Double_t y0, Double_t y1) const
{
  if (y0<=0.0 && y1<=0.0) return 0;
  if (overflow == 1) {
    // Fill under/overflow bins too
    Double_t xw= x1-x0;
    if (xw<=0) return 0;
    Double_t xbin= xw / Double_t(nm), ybin= (y1-y0)*(xbin/xw);
    x0 -= xbin;
    x1 += xbin;
    y0 -= ybin;
    y1 += ybin;
  }

  // Reduce x-range to remove negative PDF
  Double_t yw= y1-y0;
  if (y0<0.0) {
    x0= (x0*y1-x1*y0) / yw;
    y0= 0.0;
    yw= y1;
  }
  if (y1<0.0) {
    x1= (x0*y1-x1*y0) / yw;
    y1= 0.0;
    yw= -y0;
  }

  Double_t xw= x1-x0;
  if (xw<=0.0) return 0;

  if (yw==0.0) {

    // uniform PDF
    nx= Int_t(nx*y0+0.5);  // scale number of events by y0
    if (nx<=0) return 0;
    if (verbose >= 1) cout << "Generate " << nx << " fakes in range " << x0 << " to " << x1 << endl;
    x.ResizeTo(nx);
    for (Int_t i=0; i<nx; i++)
      (*&x)[i]= x0 + xw*gRandom->Rndm();
    return nx;

  } else {

    // linear PDF
    Double_t c= x1*y0-x0*y1;
    Double_t N= 0.5*yw*(x1+x0) + c;
    Double_t xa= -c/yw, xb= (c*c)/(yw*yw) + x0*x0 + 2.0*c*x0/yw, yb= 2.0*N*(xw/yw);
    nx= Int_t(nx*(N/xw)+0.5);  // scale number of events by integral/xw
    if (nx<=0) return 0;
    if (verbose >= 1) cout << "Generate " << nx << " fakes in range " << x0 << " to " << x1 << endl;
    x.ResizeTo(nx);
    Int_t nnx= 0;
    for (Int_t i=0; i<nx; i++) {
      Double_t u= gRandom->Rndm();
      Double_t xc2= xb + yb*u;
      if (xc2<0.0) continue;
      Double_t xc= sqrt(xc2), xp= xa+xc, xn= xa-xc;
      Double_t xv;
      if      (xp>=x0 && xp<x1) xv= xp;   // which root to take? Maybe always this +ve one.
      else if (xn>=x0 && xn<x1) xv= xn;
      else continue;
      (*&x)[nnx++]= xv;
    }
    if (nnx < nx) {
      if (verbose >= 0) cout << "Trouble generating " << nx-nnx << " fakes (of " << nx << ")" << endl;
      nx= nnx;
      x.ResizeTo(nx);
    }

  }
  return nx;
}

//==============================================================================
// Gaussian smearing, systematic translation, and variable inefficiency
//==============================================================================

bool RooUnfoldTestHarness::Eff (Double_t x, Double_t lo, Double_t hi, Double_t efflo, Double_t effhi) const
{
  // Apply an efficiency function to the truth.
  // Efficiency: 30% at x=lo, 90% at x=hi.

  Double_t xwidth =  (hi-lo);
  Double_t slope = (effhi-efflo) / xwidth;
  Double_t yeff= (efflo + slope * (x-lo));  // efficiency
  // MC test: if random number < eff then accept
  return (gRandom->Rndm() < yeff);
}

Double_t RooUnfoldTestHarness::Smear (Double_t x, Int_t nt, Double_t lo, Double_t hi, Double_t bias, Double_t smear) const
{
  // Apply a gaussian smearing and systematic translation to the truth.

  Double_t xsigma = (hi-lo) * smear / Double_t(nt);     // smear sigma
  
  if (!addbias || x < lo || x > hi)
    bias= 0.0;
  else {
    // actual bias is a quartic with maximum of "bias" in mid-range,
    // dropping to 0 at edges so we don't shift events in/out of range
    // (except a bit by smearing)
    Double_t xm= (2*x-(hi+lo)) / (hi-lo), xm2= xm*xm;
    bias *= 1.0-(xm2*xm2);
  }
  
  Double_t delta= xsigma <= 0.0 ? bias : gRandom->Gaus (bias, xsigma);     // bias and smear
  if (verbose>=3) cout << "SMEAR " << x << " " << xsmear << " " << xsigma << endl;
  return x+delta;

}

Double_t RooUnfoldTestHarness::Overflow (Double_t x, Int_t nt, Double_t lo, Double_t hi) const
{
  if (overflow!=2)    return x;
  else if   (x < lo)  return lo + (hi-lo) / Double_t(2*nt);
  else if (!(x < hi)) return hi - (hi-lo) / Double_t(2*nt);
  else return x;
}

//==============================================================================
// Constructors and destructor
//==============================================================================

RooUnfoldTestHarness::RooUnfoldTestHarness (const char* name)
  : TNamed(name,name)
{
  Reset();
  SetDefaults();
}

RooUnfoldTestHarness::RooUnfoldTestHarness (const char* name, int argc, const char* const* argv)
  : TNamed(name,name)
{
  Reset();
  error= SetArgs (argc, argv);
}

RooUnfoldTestHarness::RooUnfoldTestHarness (const char* name, const char* args)
  : TNamed(name,name)
{
  Reset();
  const char* const argv[]= { name, args };
  error= SetArgs (2, argv, true);
}

RooUnfoldTestHarness::~RooUnfoldTestHarness()
{
  delete errors;   errors=   0;
  delete parms;    parms=   0;
  delete response; response= 0;
  delete unfold;   unfold=   0;
  delete canvas;   canvas=   0;
  delete ps;       ps=       0;
}

//==============================================================================
// Utility routines
//==============================================================================

void RooUnfoldTestHarness::Reset()
{
  errors= 0;
  parms= 0;
  response= 0;
  unfold= 0;
  canvas= 0;
  ps= 0;
  hPDFx= hTestPDFx= 0;
  hTrain= hTrainTrue= hTrainFake= hTrue= hMeas= hFake= hReco= hRes= hPulls=
    hUnfErr= hToyErr= hParmChi2= hParmErr= hParmRes= hParmRms= 0;
  hResmat= hCorr= hMeasCorr= 0;
  ntChi2= 0;
  lTrain= lTest= lErrors= 0;
  error= ipad= 0;
  dim= 1;
  nbPDF= 500;
  wpaper= hpaper= 0;
}

void RooUnfoldTestHarness::SetDefaults()
{
  ArgVars args;
  Parms (args);
  args.SetDefaults();
}

int RooUnfoldTestHarness::SetArgs (int argc, const char* const* argv, bool split)
{
  ArgVars args;
  Parms (args);
  return args.SetArgs (argc, argv, split);
}

void RooUnfoldTestHarness::Init()
{
  rootfile= GetName();
  rootfile += ".root";

  if (nmx==-1) nmx= ntx;
  if (overflow==2) {
    Double_t xwid= (xhi-xlo) / ntx;
    xlo -= xwid;
    xhi += xwid;
    ntx += 2;
    nmx += Int_t (2.0*(Double_t(nmx)/Double_t(ntx)) + 0.5);
  }
  mscalex= (nmx==ntx) ? 1.0 : Double_t(nmx)/Double_t(ntx);
  ntbins= ntx;
  nmbins= nmx;
  if (onepage) {
    if (hpaper==0) hpaper= 900;
  } else {
    if (wpaper==0) wpaper= 750;
    if (hpaper==0) hpaper= 300;
  }
}

Int_t RooUnfoldTestHarness::CheckParms()
{
  if (addbias==-1)
    addbias= (method==RooUnfold::kBinByBin || method==RooUnfold::kInvert) ? 0 : 1;  // bin-by-bin/invert methods can't handle bias

  if (verbose>=0) PrintParms (cout);

  if (xlo >= xhi) {cout << "Error: xlo ("    << xlo    << ") >= xhi(" << xhi << ")" << endl; error = 2;}
  if (ntest<=0)   {cout << "Error: ntest ("  << ntest  << ") <= 0"                  << endl; error = 2;}
  if (ntrain<=0)  {cout << "Error: ntrain (" << ntrain << ") <= 0"                  << endl; error = 2;}
  if (nmx<=0)     {cout << "Error: nmx ("    << nmx    << ") <= 0"                  << endl; error = 2;}
  if (ntx<=0)     {cout << "Error: ntx ("    << ntx    << ") <= 0"                  << endl; error = 2;}
  if (ftestx<0)   {cout << "Error: ftestx (" << ftestx << ") < 0"                   << endl; error = 2;}
  if (ftrainx<0)  {cout << "Error: ftrainx ("<< ftrainx<< ") < 0"                   << endl; error = 2;}
  return error;
}

void RooUnfoldTestHarness::PrintParms (std::ostream& o) const
{
  ArgVars args;
  const_cast<RooUnfoldTestHarness*>(this)->Parms (args);
  o << GetName() << " ";
  args.Print (o);
  o << endl;
}

TH2D* RooUnfoldTestHarness::CorrelationHist (const TMatrixD& cov,
                                             const char* name, const char* title,
                                             Double_t lo, Double_t hi)
{
  Int_t nb= cov.GetNrows();
  TH2D* h= new TH2D (name, title, nb, lo, hi, nb, lo, hi);
  h->SetAxisRange (-1.0, 1.0, "Z");
  for(int i=0; i < nb; i++)
    for(int j=0; j < nb; j++) {
      Double_t Viijj= cov(i,i)*cov(j,j);
      if (Viijj>0.0) h->SetBinContent (i+1, j+1, cov(i,j)/sqrt(Viijj));
    }
  return h;
}

void RooUnfoldTestHarness::Legend (TLegend*& legend, TH1* pdf, TH1* truth, TH1* fake, TH1* meas, TH1* reco)
{
  legend= new TLegend (0.79, (reco ? 0.72 : 0.75), 0.894, 0.89);
  legend->SetTextSize(0.035);
  legend->SetTextFont(42);
  legend->AddEntry (pdf,   "PDF",           "L");
  legend->AddEntry (truth, "truth",         "L");
  if (fake)
  legend->AddEntry (fake,  "fakes",         "L");
  legend->AddEntry (meas,  "measured",      "L");
  if (reco)
  legend->AddEntry (reco,  "reconstructed", "P");
  legend->Draw();
}

void RooUnfoldTestHarness::PrintMatrix(const TMatrixD& m, const char* format,
                                       const char* name, Int_t cols_per_sheet)
{
   // Print the matrix as a table of elements.
   // Based on TMatrixTBase<>::Print, but allowing user to specify name and cols_per_sheet (also option -> format).
   // By default the format "%11.4g" is used to print one element.
   // One can specify an alternative format with eg
   //  format ="%6.2f  "

   if (!m.IsValid()) {
     m.Error("PrintMatrix","%s is invalid",name);
     return;
   }

   const Int_t ncols  = m.GetNcols();
   const Int_t nrows  = m.GetNrows();
   const Int_t collwb = m.GetColLwb();
   const Int_t rowlwb = m.GetRowLwb();

   if (!(format && format[0])) format= "%11.4g ";
   char topbar[1000];
   snprintf(topbar,1000,format,123.456789);
   Int_t nch = strlen(topbar)+1;
   if (nch > 18) nch = 18;
   char ftopbar[20];
   for (Int_t i = 0; i < nch; i++) ftopbar[i] = ' ';
   Int_t nk = 1 + Int_t(log10(ncols));
   snprintf(ftopbar+nch/2,20-nch/2,"%s%dd","%",nk);
   Int_t nch2 = strlen(ftopbar);
   for (Int_t i = nch2; i < nch; i++) ftopbar[i] = ' ';
   ftopbar[nch] = '|';
   ftopbar[nch+1] = 0;

   printf("\n%dx%d %s is as follows",nrows,ncols,name);

   if (cols_per_sheet <= 0) {
     cols_per_sheet = 5;
     if (nch <= 8) cols_per_sheet =10;
   }
   nk = 5+nch*(cols_per_sheet<ncols ? cols_per_sheet : ncols);
   for (Int_t i = 0; i < nk; i++) topbar[i] = '-';
   topbar[nk] = 0;
   for (Int_t sheet_counter = 1; sheet_counter <= ncols; sheet_counter += cols_per_sheet) {
      printf("\n\n     |");
      for (Int_t j = sheet_counter; j < sheet_counter+cols_per_sheet && j <= ncols; j++)
         printf(ftopbar,j+collwb-1);
      printf("\n%s\n",topbar);
      if (m.GetNoElements() <= 0) continue;
      for (Int_t i = 1; i <= nrows; i++) {
         printf("%4d |",i+rowlwb-1);
         for (Int_t j = sheet_counter; j < sheet_counter+cols_per_sheet && j <= ncols; j++)
            printf(format,m(i+rowlwb-1,j+collwb-1));
         printf("\n");
      }
   }
   printf("\n");
}

//==============================================================================
// Set histogram Y-axis display range
//==============================================================================

void RooUnfoldTestHarness::setmax (TH1* h,
                                   const TH1* h1, const TH1* h2, const TH1* h3,
                                   const TH1* h4, const TH1* h5, const TH1* h6)
{
  // Get the maximum y value of up to 7 histograms
  // Add 10% to match behaviour of ROOT's automatic scaling
  Double_t maxval= h1 ? h1->GetMaximum() : -DBL_MAX;
  if (h2 && h2->GetMaximum() > maxval) maxval= h2->GetMaximum();
  if (h3 && h3->GetMaximum() > maxval) maxval= h3->GetMaximum();
  if (h4 && h4->GetMaximum() > maxval) maxval= h4->GetMaximum();
  if (h5 && h5->GetMaximum() > maxval) maxval= h5->GetMaximum();
  if (h6 && h6->GetMaximum() > maxval) maxval= h6->GetMaximum();
  h->SetMinimum (0.0);
  if (maxval > h->GetMaximum()) h->SetMaximum (1.1*maxval);
}

#endif
